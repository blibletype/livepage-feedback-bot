const {
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require("discord.js");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("setup")
    .setDescription("setup the button menu"),
  async execute(interaction, client) {
    await interaction.deferReply({
      fetchReply: true,
      ephemeral: true,
    });

    const guild = interaction.guild;
    const menuChannel = await guild.channels
      .create({
        name: "menu",
      })
      .then((newChannel) => {
        return guild.channels.cache.find(
          (channel) => channel.id === newChannel.id
        );
      });

    menuEmbed = new EmbedBuilder().setTitle("üóÉÔ∏è | –ú–µ–Ω—é").addFields([
      {
        name: "\u200b",
        value: "\u200b",
      },
      {
        name: "üïµÔ∏è | –ê–Ω–æ–Ω—ñ–º–Ω–∏–π —Ñ—ñ–¥–±–µ–∫",
        value:
          ">>> –§—ñ–¥–±–µ–∫ –ø—Ä–æ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ—Ü–µ—Å–∏. –ú–∏ –∑–∞–≤–∂–¥–∏ –ø–æ–∫—Ä–∞—â—É—î–º–æ —ó—Ö, –º–æ–∂–ª–∏–≤–æ —Ç–∏ –¥–æ–ø–æ–º–æ–∂–µ—à –Ω–∞–º —É —Ü—å–æ–º—É.",
        inline: true,
      },
      {
        name: "üí° | –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è",
        value:
          ">>> –Ø–∫—â–æ —É —Ç–µ–±–µ —î —ñ–¥–µ—è, –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —â–æ–¥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É, —Å–∫–æ—Ä—ñ—à –ø–∏—à–∏.",
        inline: true,
      },
      {
        name: "üíª | –í–∏—Ä—ñ—à–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑ —Ç–µ—Ö–Ω—ñ–∫–æ—é",
        value:
          ">>> –Ø–∫—â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –æ–±–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º –º—ñ—Å—Ü—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ - –ø–∏—à–∏.",
        inline: true,
      },
      {
        name: "\u200b",
        value: "\u200b",
      },
      {
        name: "üóø | –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º",
        value: "\u200b",
        inline: true,
      },
      {
        name: "üîó | –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å",
        value: "\u200b",
        inline: true,
      },
      {
        name: "üßë‚Äçüíº | –î–æ –∫–æ–≥–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
        value: "\u200b",
        inline: true,
      },
    ]);

    const linkButton = new ButtonBuilder()
      .setCustomId("useful-links")
      .setLabel("üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–ø–∞–Ω—ñ—ó")
      .setStyle(ButtonStyle.Success);
    const memButton = new ButtonBuilder()
      .setCustomId("random-meme")
      .setLabel("üóø–ú–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ—é")
      .setStyle(ButtonStyle.Secondary);
    const whoCanHelpButton = new ButtonBuilder()
      .setCustomId("who-can-help")
      .setLabel("üßë‚Äçüíº–î–æ –∫–æ–≥–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å")
      .setStyle(ButtonStyle.Primary);
    const anonFeedbackButton = new ButtonBuilder()
      .setCustomId("anonimously-feedback")
      .setLabel("üïµÔ∏è‚Äç‚ôÄÔ∏è–ê–Ω–æ–Ω–æ–Ω—ñ–º–Ω–∏–π —Ñ—ñ–¥–±–µ–∫")
      .setStyle(ButtonStyle.Danger);
    const suggestionsButton = new ButtonBuilder()
      .setCustomId("suggestions")
      .setLabel("üí°–Ü–¥–µ—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
      .setStyle(ButtonStyle.Primary);
    const problemsWithTechnicsButton = new ButtonBuilder()
      .setCustomId("problems-with-technics")
      .setLabel("üíª–¢–µ—Ö–Ω—ñ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏")
      .setStyle(ButtonStyle.Success);

    const buttonRow1 = new ActionRowBuilder().addComponents(
      anonFeedbackButton,
      suggestionsButton,
      problemsWithTechnicsButton
    );
    const buttonRow2 = new ActionRowBuilder().addComponents(
      memButton,
      linkButton,
      whoCanHelpButton
    );
    await menuChannel.send({
      embeds: [menuEmbed],
      components: [buttonRow1, buttonRow2],
    });

    embed = new EmbedBuilder()
      .setTitle("‚úÖ | Successful")
      .setColor([238, 75, 43])
      .setDescription(`You can check this channel now - ${menuChannel}`)
      .setTimestamp(Date.now());
    await interaction.editReply({
      embeds: [embed],
    });
  },
};
